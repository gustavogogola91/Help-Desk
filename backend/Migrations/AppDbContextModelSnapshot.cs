// <auto-generated />
using System;
using System.Collections.Generic;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "status_atendimento", new[] { "aguardando", "em_atendimento", "concluido" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "tipo_usuario", new[] { "adm", "suporte" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Model.Chamado", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<List<string>>("Anexo")
                        .HasColumnType("text[]");

                    b.Property<string>("Computador")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataAbertura")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataFinalizado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("EquipamentoId")
                        .HasColumnType("bigint");

                    b.Property<long>("EstabelecimentoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("NomeSolicitante")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Protocolo")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Ramal")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<long>("SetorDestinoId")
                        .HasColumnType("bigint");

                    b.Property<long>("SetorSolicitanteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EquipamentoId");

                    b.HasIndex("EstabelecimentoId");

                    b.HasIndex("SetorDestinoId");

                    b.HasIndex("SetorSolicitanteId");

                    b.ToTable("tb_chamado");
                });

            modelBuilder.Entity("backend.Model.ChamadoAcompanhamento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChamadoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataMensagem")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChamadoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("tb_chamado_acompanhamento");
                });

            modelBuilder.Entity("backend.Model.ChamadoAtendimento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChamadoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DataFinalizado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataTransferencia")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("InicioAtendimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ObservacaoTransferencia")
                        .HasColumnType("text");

                    b.Property<long>("SetorAtualId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SetorTransferenciaId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("UsuarioAtendimentoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChamadoId");

                    b.HasIndex("SetorAtualId");

                    b.HasIndex("SetorTransferenciaId");

                    b.HasIndex("UsuarioAtendimentoId");

                    b.ToTable("tb_chamado_atendimento");
                });

            modelBuilder.Entity("backend.Model.Equipamento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<long>("SetorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SetorId");

                    b.ToTable("tb_equipamento");
                });

            modelBuilder.Entity("backend.Model.Estabelecimento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.ToTable("tb_estabelecimento");
                });

            modelBuilder.Entity("backend.Model.Setor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<long>("EstabelecimentoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<bool>("Suporte")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EstabelecimentoId");

                    b.ToTable("tb_setor");
                });

            modelBuilder.Entity("backend.Model.SetorUsuario", b =>
                {
                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.Property<long>("SetorId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("UsuarioId", "SetorId");

                    b.HasIndex("SetorId");

                    b.ToTable("tb_setor_usuario");
                });

            modelBuilder.Entity("backend.Model.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.ToTable("tb_usuario");
                });

            modelBuilder.Entity("backend.Model.Chamado", b =>
                {
                    b.HasOne("backend.Model.Equipamento", "Equipamento")
                        .WithMany()
                        .HasForeignKey("EquipamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Model.Estabelecimento", "Estabelecimento")
                        .WithMany()
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Model.Setor", "SetorDestino")
                        .WithMany()
                        .HasForeignKey("SetorDestinoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Model.Setor", "SetorSolicitante")
                        .WithMany()
                        .HasForeignKey("SetorSolicitanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipamento");

                    b.Navigation("Estabelecimento");

                    b.Navigation("SetorDestino");

                    b.Navigation("SetorSolicitante");
                });

            modelBuilder.Entity("backend.Model.ChamadoAcompanhamento", b =>
                {
                    b.HasOne("backend.Model.Chamado", "Chamado")
                        .WithMany("Acompanhamentos")
                        .HasForeignKey("ChamadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chamado");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("backend.Model.ChamadoAtendimento", b =>
                {
                    b.HasOne("backend.Model.Chamado", "Chamado")
                        .WithMany()
                        .HasForeignKey("ChamadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Model.Setor", "SetorAtual")
                        .WithMany()
                        .HasForeignKey("SetorAtualId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Model.Setor", "SetorTransferencia")
                        .WithMany()
                        .HasForeignKey("SetorTransferenciaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend.Model.Usuario", "UsuarioAtendimento")
                        .WithMany()
                        .HasForeignKey("UsuarioAtendimentoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Chamado");

                    b.Navigation("SetorAtual");

                    b.Navigation("SetorTransferencia");

                    b.Navigation("UsuarioAtendimento");
                });

            modelBuilder.Entity("backend.Model.Equipamento", b =>
                {
                    b.HasOne("backend.Model.Setor", "Setor")
                        .WithMany()
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Setor");
                });

            modelBuilder.Entity("backend.Model.Setor", b =>
                {
                    b.HasOne("backend.Model.Estabelecimento", "Estabelecimento")
                        .WithMany()
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estabelecimento");
                });

            modelBuilder.Entity("backend.Model.SetorUsuario", b =>
                {
                    b.HasOne("backend.Model.Setor", "Setor")
                        .WithMany()
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Usuario", "Usuario")
                        .WithMany("SetoresSuporte")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Setor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("backend.Model.Chamado", b =>
                {
                    b.Navigation("Acompanhamentos");
                });

            modelBuilder.Entity("backend.Model.Usuario", b =>
                {
                    b.Navigation("SetoresSuporte");
                });
#pragma warning restore 612, 618
        }
    }
}
